[{"/Users/GregoryRoss1/anagram-finder/src/index.js":"1","/Users/GregoryRoss1/anagram-finder/src/App.js":"2","/Users/GregoryRoss1/anagram-finder/src/reportWebVitals.js":"3","/Users/GregoryRoss1/anagram-finder/src/components/Search.jsx":"4","/Users/GregoryRoss1/anagram-finder/src/dfs.js":"5","/Users/GregoryRoss1/anagram-finder/src/components/Display.jsx":"6","/Users/GregoryRoss1/anagram-finder/src/components/Input.jsx":"7","/Users/GregoryRoss1/anagram-finder/src/components/Word.jsx":"8"},{"size":500,"mtime":1608589661675,"results":"9","hashOfConfig":"10"},{"size":633,"mtime":1609157196685,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":1608589661676,"results":"12","hashOfConfig":"10"},{"size":828,"mtime":1609162595824,"results":"13","hashOfConfig":"10"},{"size":783,"mtime":1608805522114,"results":"14","hashOfConfig":"10"},{"size":1601,"mtime":1609159482283,"results":"15","hashOfConfig":"10"},{"size":1289,"mtime":1609162533113,"results":"16","hashOfConfig":"10"},{"size":3885,"mtime":1609165153526,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1aujulj",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"20"},"/Users/GregoryRoss1/anagram-finder/src/index.js",[],["36","37"],"/Users/GregoryRoss1/anagram-finder/src/App.js",[],"/Users/GregoryRoss1/anagram-finder/src/reportWebVitals.js",[],"/Users/GregoryRoss1/anagram-finder/src/components/Search.jsx",[],"/Users/GregoryRoss1/anagram-finder/src/dfs.js",[],"/Users/GregoryRoss1/anagram-finder/src/components/Display.jsx",[],"/Users/GregoryRoss1/anagram-finder/src/components/Input.jsx",[],"/Users/GregoryRoss1/anagram-finder/src/components/Word.jsx",["38"],"import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\"\nimport { wordAnimations } from \"../dfs\";\n\nconst { REACT_APP_KEY, REACT_APP_HOST } = process.env;\n\nconst Word = (props) => {\n\n    const [arr, setArray] = useState({id:'', arr: []});\n    const [currentWord, setCurrentWord] = useState('');\n\n    var { word, setWordList} = props;\n\n    //based on word length map out span elements\n    useEffect(() => {\n\n      setArray({id:'',arr: []});\n      setCurrentWord('');\n      setWordList([]);\n\n      if(!word) return;\n\n      const wordArr = [];\n\n      for(let c in word) wordArr.push(word.charAt(c));\n      \n      setArray({ id: word, arr: wordArr });\n\n      if(arr.arr.length > 0 && arr.id === word) search();\n        \n    }, [arr.id, word, setWordList, arr.arr.length])\n\n    const search = async () => {\n        props.setDisableInput(true);\n        const list = [];\n        let animations = wordAnimations(props.word, list);\n        let animationSeen = new Set();\n        let wordSeen = new Set();\n\n        const validWords = []\n        let spinner = document.getElementsByClassName(\"spinner\");\n        spinner[0].style.display = \"block\";\n\n        for(let word of list){\n\n          if(!wordSeen.has(word)){\n\n            wordSeen.add(word);\n            \n            if(word.length === 1){\n              validWords.push(null);\n              continue;\n            }\n\n            const options = {\n              method: 'GET',\n              url: `https://wordsapiv1.p.rapidapi.com/words/${word}/definitions`,\n              headers: {\n                'x-rapidapi-key': `${REACT_APP_KEY}`,\n                'x-rapidapi-host': `${REACT_APP_HOST}`\n              }\n            };\n\n            try{\n\n              let res = await axios.request(options);\n              if(res.data.definitions.length > 0) validWords.push(res.data);\n              else validWords.push(null);\n\n            }catch(e) { validWords.push(null) } \n            \n          }else validWords.push(null);\n\n        }\n\n        spinner[0].style.display = \"none\";\n\n        let j = 0;\n        let animationWithWord = animations.map(a => ({an: a, list: list[j], v: validWords[j++]}))   \n        \n        let i = 0;\n        animationWithWord.forEach(a => {\n\n          const spanObject = document.getElementsByClassName(\"letters-arr\");\n          const index = [a.an]\n\n            setTimeout(() => {\n\n                spanObject[index].style.color =  \n                spanObject[index].style.color === \"red\" ? \"black\" : \"red\";\n\n                if(animationSeen.has(index)) animationSeen.delete(index);\n                else{\n                setCurrentWord(a.list);\n                animationSeen.add(index)\n                }\n\n                if(a.v){\n                a.v = {\n                    ...a.v,\n                    display: false\n                }\n\n                let setWordList = props.setWordList;\n                setWordList(prevList => [...prevList, a.v]);\n                }\n                \n            }, i * 150 + 150)\n\n          i++;\n\n        })\n\n      setTimeout(() =>  { \n          setCurrentWord(\"\") \n          props.setDisableInput(false);\n        }, i * 150 + 150);\n      \n    }\n\n    return(\n        <div className=\"animation_container\">\n\n          <div className=\"character_container\"\n            style={{display: arr.arr.length > 0 ? \"block\":\"none\"}}>\n           \n            {\n              arr.arr.map((c,i) => (\n                  <span className=\"letters-arr\" \n                    key={c + i}\n                    > {c} </span>\n              )) \n            }\n\n          </div>\n\n          <div className=\"spinner_container\">\n            <span className=\"spinner\">\n\n            </span>\n          </div>\n\n          <div className=\"current_word_container\" style={{display: currentWord ? \"block\":\"none\"}}>\n            { currentWord } \n          </div>\n\n        </div>\n    )\n\n}\n\nexport default Word",{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":31,"column":8,"nodeType":"45","endLine":31,"endColumn":51,"suggestions":"46"},"no-native-reassign",["47"],"no-negated-in-lhs",["48"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'search'. Either include it or remove the dependency array.","ArrayExpression",["49"],"no-global-assign","no-unsafe-negation",{"desc":"50","fix":"51"},"Update the dependencies array to be: [arr.id, word, setWordList, arr.arr.length, search]",{"range":"52","text":"53"},[743,786],"[arr.id, word, setWordList, arr.arr.length, search]"]