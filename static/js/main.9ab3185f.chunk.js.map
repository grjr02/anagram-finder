{"version":3,"sources":["components/Input.jsx","dfs.js","components/Word.jsx","components/Search.jsx","components/Display.jsx","App.js","reportWebVitals.js","index.js"],"names":["Input","props","useState","input","setInput","atMaxCharLength","setMaxCharLength","className","onSubmit","e","preventDefault","setWord","setWordList","type","value","onChange","target","length","charAt","match","substring","trim","toLowerCase","disabled","disableInput","style","background","cursor","display","htmlFor","wordAnimations","array","list","animations","dfs","Set","set4","sb","i","has","add","push","delete","process","REACT_APP_KEY","REACT_APP_HOST","Word","id","arr","setArray","currentWord","setCurrentWord","word","useEffect","wordArr","c","search","a","setDisableInput","setShowFirstDefinition","animationSeen","wordSeen","validWords","spinner","document","getElementsByClassName","options","method","url","headers","axios","request","res","data","definitions","j","animationWithWord","map","an","v","forEach","spanObject","curWordObj","index","setTimeout","color","prevList","Search","wordList","Display","setShow","show","showFirstDefinition","displayDef","temp","x","onClick","flex","padding","y","definition","App","alignSelf","fontSize","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.9ab3185f.chunk.js","sourcesContent":["import React, { useState } from \"react\"\nimport '../Search-style.css';\n\nconst Input = (props) => {\n\n    const [input, setInput] = useState('');\n    const [ atMaxCharLength, setMaxCharLength ] = useState(false);\n\n    //Update input in textfield\n    const onChangeHandler = (e) => {\n      e.preventDefault();\n     \n      let value = (e.target.value);\n\n      if(value.length <= 5) setMaxCharLength(false);\n      else setMaxCharLength(true);\n\n      if(!value.charAt(value.length-1).match(/[a-z]/i) && value.length > 0) setInput(input);\n      else setInput(value.substring(0,5).trim().toLowerCase());\n\n    }\n\n    //On submit handler\n    const onSubmitHandler = (e) => {\n      e.preventDefault()\n      props.setWord(input)\n      setInput('');\n      props.setWordList([])\n    }\n\n    return(\n        <div className=\"input_container\">\n            <form className=\"form_container\" onSubmit={onSubmitHandler}>\n                <input className=\"textfield\" type=\"text\" value={input} onChange={onChangeHandler}/>\n                <input className=\"button\" type=\"submit\" value=\"Search\"\n                    disabled={props.disableInput ? \"disabled\" : \"\"}\n                    style={{ \n                        background: props.disableInput? \n                        \"rgb(221, 160, 221, .1)\": \"var(--color-one)\", \n                        cursor: props.disableInput ? 'default': 'pointer'\n                    }}\n                />\n                <br/>\n                <label style={{display: atMaxCharLength ? \"block\" : \"none\" }} htmlFor=\"\">Max character length is 5</label>\n            </form>\n        </div>\n    )\n}\n\nexport default Input","//Gets animations for each substring combination\nexport function wordAnimations(array, list) {\n    const animations = [];\n    var set4 = new Set(); \n    \n    dfs(array, set4, '', list, animations );\n    //list.push(\"\");\n\n    return animations;\n}  \n  \nfunction dfs(array, set4, sb, list, animations){\n\n    if(sb.length === array.length)return;\n\n    for(let i = 0; i < array.length; i++){\n\n        if(set4.has(i))continue;\n        \n        set4.add(i);\n        animations.push([i]);\n\n        sb = sb + array[i];\n        sb = sb.toLowerCase();\n        list.push(sb);\n     \n        dfs(array, set4, sb, list, animations);\n\n        set4.delete(i);\n        list.push(sb);\n        sb = sb.substring(0,sb.length-1);\n        animations.push([i]);\n\n    }\n\n}","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\"\nimport { wordAnimations } from \"../dfs\";\nimport '../Search-style.css';\n\n\nconst { REACT_APP_KEY, REACT_APP_HOST } = process.env;\n\nconst Word = (props) => {\n\n    const [arr, setArray] = useState({id:'', arr: []});\n    const [currentWord, setCurrentWord] = useState('');\n\n    var { word, setWordList } = props;\n\n    //based on word length map out span elements\n    useEffect(() => {\n\n      setArray({id:'',arr: []});\n      setCurrentWord('');\n      setWordList([]);\n\n      if(!word) return;\n\n      const wordArr = [];\n\n      for(let c in word) wordArr.push(word.charAt(c));\n      \n      setArray({ id: word, arr: wordArr });\n\n      if(arr.arr.length > 0 && arr.id === word) search();\n        \n    }, [arr.id, word, setWordList, arr.arr.length])\n\n    const search = async () => {\n        props.setDisableInput(true);\n        props.setShowFirstDefinition(false);\n        const list = [];\n        let animations = wordAnimations(props.word, list);\n        let animationSeen = new Set();\n        let wordSeen = new Set();\n\n        const validWords = []\n        let spinner = document.getElementsByClassName(\"spinner\");\n        spinner[0].style.display = \"block\";\n\n        for(let word of list){\n\n          if(!wordSeen.has(word)){\n\n            wordSeen.add(word);\n            \n            if(word.length === 1){\n              validWords.push(null);\n              continue;\n            }\n\n            const options = {\n              method: 'GET',\n              url: `https://wordsapiv1.p.rapidapi.com/words/${word}/definitions`,\n              headers: {\n                'x-rapidapi-key': `${REACT_APP_KEY}`,\n                'x-rapidapi-host': `${REACT_APP_HOST}`\n              }\n            };\n\n            try{\n\n              let res = await axios.request(options);\n              if(res.data.definitions.length > 0) validWords.push(res.data);\n              else validWords.push(null);\n\n            }catch(e) { validWords.push(null) } \n            \n          }else validWords.push(null);\n\n        }\n\n        spinner[0].style.display = \"none\";\n\n        let j = 0;\n        let animationWithWord = animations.map(a => ({an: a, list: list[j], v: validWords[j++]}))   \n        \n        let i = 0;\n        animationWithWord.forEach(a => {\n\n          const spanObject = document.getElementsByClassName(\"letters-arr\");\n          const curWordObj = document.getElementsByClassName(\"current_word_container\");\n\n          const index = [a.an]\n\n            setTimeout(() => {\n\n                spanObject[index].style.color =  \n                spanObject[index].style.color === \"red\" ? \"black\" : \"red\";\n\n                if(animationSeen.has(index)) animationSeen.delete(index);\n                else{\n\n                  curWordObj[0].style.background = a.v ? \"#99edc350\" : \"plum\";\n                  curWordObj[0].style.color = a.v ? \"#ffffff\" : \"black\";\n\n                  setCurrentWord(a.list);\n\n                  animationSeen.add(index);\n\n                }\n\n                if(a.v){\n                a.v = {\n                    ...a.v,\n                    display: false\n                }\n\n                let setWordList = props.setWordList;\n                setWordList(prevList => [...prevList, a.v]);\n                }\n                \n            }, i * 150 + 150)\n\n          i++;\n\n        })\n\n      setTimeout(() =>  { \n          setCurrentWord(\"\") \n          props.setDisableInput(false);\n          props.setShowFirstDefinition(true);\n        }, i * 150 + 150);\n      \n    }\n\n    return(\n        <div className=\"animation_container\">\n\n          <div className=\"character_container\"\n            style={{display: arr.arr.length > 0 ? \"block\":\"none\"}}>\n           \n            {\n              arr.arr.map((c,i) => (\n                  <span className=\"letters-arr\" \n                    key={c + i}\n                    > {c} </span>\n              )) \n            }\n\n          </div>\n\n          <div className=\"spinner_container\">\n            <span className=\"spinner\">\n\n            </span>\n          </div>\n\n          <div className=\"current_word_container\" style={{display: currentWord ? \"block\":\"none\"}}>\n            { currentWord } \n          </div>\n\n        </div>\n    )\n\n}\n\nexport default Word","import React, { useState } from 'react'\nimport Input from \"./Input\"\nimport Word from \"./Word\"\n\nimport '../Search-style.css';\n\nconst Search = (props) => {\n\n    const [word, setWord] = useState('');\n    const [disableInput, setDisableInput] = useState(false)\n\n    return(\n      <div className=\"input_and_display\">\n        <div className=\"search_input\">\n          <h4 className=\"label\">Enter text</h4>\n          <Input setWord={setWord} setWordList={props.setWordList} \n            disableInput={disableInput}\n          />\n        </div>\n        <div className=\"word_display\">\n          <Word wordList={props.wordList} \n            setWordList={props.setWordList} word={word}\n            setDisableInput={setDisableInput}\n            setShowFirstDefinition={props.setShowFirstDefinition}\n          />\n        </div>\n      </div>\n    )\n}\n\nexport default Search","import React, { useState, useEffect } from 'react'\n\nconst Display = (props) => {\n\n    const [wordList, setWordList] = useState([]);\n    const [show, setShow] = useState(false)\n\n    useEffect(() => {\n        let list = props.wordList;\n        let show = props.showFirstDefinition\n\n        if(props.showFirstDefinition && list.length > 0 ){\n\n            setTimeout( () => {\n                setShow(true);\n                if(show) displayDef(0);\n                setShow(false);\n            }, 2800)\n            \n        }\n        setWordList(list)\n        \n    \n    }, [props.wordList, wordList.display, props.showFirstDefinition])\n\n    const displayDef = (index) => {\n\n        let temp = wordList;\n\n        for(let i = 0; i < temp.length; i++){\n            if(i === index) temp[index].display = !temp[index].display;\n            else temp[i].display = false;\n        }\n    \n        setWordList([...temp])\n\n    }\n\n    return(\n        <div className=\"list_container\">\n            <div className=\"word_container_item\">\n                {\n                    wordList.map((x,j)=>(\n                        <div key ={x.word} onClick={()=>displayDef(j)} className=\"word_item\">\n                            {x.word}\n                            <div style={{flex: .5, padding: x.display ? \"10px\" : \"0\"}}>\n                                {\n                                    x.definitions.map((y,i) => (\n                                        <div\n                                        key={i}\n                                        className=\"definitions\"\n                                        style={{display: x.display ? \"block\" : \"none\"}}>\n                                            {i+1}. {y.definition}\n                                        </div>\n                                    ))\n                                }\n                            </div>\n                        </div>\n                    ))\n                }\n            </div>\n        </div>\n    )\n}\n\nexport default Display","import './App.css';\nimport Search from './components/Search'\nimport Display from './components/Display'\nimport { useState } from 'react';\n\nfunction App() {\n\n  const [wordList, setWordList] = useState([]);\n  const [showFirstDefinition, setShowFirstDefinition] = useState(false)\n\n  return (\n    <div className=\"App\">\n      <div className=\"header\">\n        <span style={{alignSelf:'center', fontSize: '24px'}}>\n          Anagram Finder\n        </span>\n      </div>\n      <div className=\"search_container\">\n        <Search \n          wordList={wordList} setWordList={setWordList} \n          setShowFirstDefinition={setShowFirstDefinition}\n        />\n      </div>\n      <div className=\"display_container\">\n        <Display wordList={wordList} showFirstDefinition={showFirstDefinition}/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}